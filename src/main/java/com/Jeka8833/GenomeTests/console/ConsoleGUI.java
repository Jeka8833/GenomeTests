/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.Jeka8833.GenomeTests.console;

import com.Jeka8833.GenomeTests.console.console.Command;
import com.Jeka8833.GenomeTests.world.World;
import com.Jeka8833.GenomeTests.world.WorldTimeManager;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.jetbrains.annotations.NotNull;

import javax.swing.*;

/**
 * @author Jeka8833
 */
public class ConsoleGUI extends javax.swing.JFrame {
    private static final Logger LOGGER = LogManager.getLogger(ConsoleGUI.class);

    private WorldTimeManager timeManager;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        logPaneUI = new javax.swing.JTextArea();
        consoleInputUI = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        statusPaneUI = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        logPaneUI.setEditable(false);
        logPaneUI.setColumns(20);
        logPaneUI.setFont(logPaneUI.getFont().deriveFont(12f));
        logPaneUI.setRows(5);
        jScrollPane1.setViewportView(logPaneUI);

        consoleInputUI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.@NotNull KeyEvent evt) {
                consoleInputUIKeyPressed(evt);
            }
        });

        jLabel1.setText("Console logs:");

        statusPaneUI.setEditable(false);
        statusPaneUI.setColumns(20);
        statusPaneUI.setRows(5);
        jScrollPane2.setViewportView(statusPaneUI);

        jLabel2.setText("Status pane:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(consoleInputUI, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel2))
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(consoleInputUI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jScrollPane2))
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void consoleInputUIKeyPressed(java.awt.event.@NotNull KeyEvent evt) {//GEN-FIRST:event_consoleInputUIKeyPressed
        if (evt.getKeyCode() == 10) {
            String inputText = consoleInputUI.getText();

            String[] args = inputText.split(" ", 2);
            if (args.length == 0) return;

            addLog("> " + inputText);

            for (Command command : Command.COMMANDS) {
                if (command.prefix().equalsIgnoreCase(args[0])) {
                    String argument = args.length >= 2 ? args[1] : null;
                    try {
                        if (argument != null && (argument.equalsIgnoreCase("-help") ||
                                argument.equalsIgnoreCase("-h"))) {
                            addLog(command.help());
                        } else {
                            command.execute(argument, timeManager);
                        }
                        consoleInputUI.setText("");
                    } catch (Exception e) {
                        if (e.getMessage() == null || e.getMessage().isEmpty()) {
                            addLog("Incorrect parameters");
                            addLog(command.help());
                        } else {
                            addLog("Fail run > " + e.getMessage());
                        }
                    }
                    return;
                }
            }
            addLog("Unknown command");
        }
    }//GEN-LAST:event_consoleInputUIKeyPressed

    public static @NotNull ConsoleGUI create() {
        var console = new ConsoleGUI();

        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException |
                 UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConsoleGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        var timer = new Timer(3000, e -> {
            if (console.timeManager != null) {
                var sb = new StringBuilder();

                sb.append("Simulation ").append(console.timeManager.getWorlds().size()).append(" worlds is ")
                        .append(console.timeManager.isRun() ? "Started" : "Stopped").append("\n");

                for (int i = 0; i < console.timeManager.getWorlds().size(); i++) {
                    World world = console.timeManager.getWorlds().get(i);
                    sb.append(world.getName()).append(": TPM: ")
                            .append(world.getAvgTickPerMinute()).append("\n")
                            .append("Tick: ").append(world.getTickCount()).append("\n");
                }

                console.statusPaneUI.setText(sb.toString());
            }
        });
        timer.start();

        ConsoleHook.addListener((text) -> console.logPaneUI.append(text));

        java.awt.EventQueue.invokeLater(() -> {
            console.initComponents();
            console.setVisible(true);
        });

        return console;
    }

    public void addLog(String text) {
        logPaneUI.append(text + "\n");
    }

    public void setTimeManager(WorldTimeManager timeManager) {
        this.timeManager = timeManager;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField consoleInputUI;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea logPaneUI;
    private javax.swing.JTextArea statusPaneUI;
    // End of variables declaration//GEN-END:variables
}
